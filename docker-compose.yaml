services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  db-prep:
    build:
      context: .
      dockerfile: Dockerfile
    command: python -m knowledge_base_assistant.db_prep
    env_file:
      - ./.env
    environment:
      PYTHONPATH: /app
      POSTGRES_HOST: postgres
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
    depends_on:
      postgres:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 10

  grafana-init:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      GRAFANA_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GRAFANA_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
      POSTGRES_HOST: postgres
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
    volumes:
      - .:/app
    working_dir: /app
    command: python grafana/init.py
    depends_on:
      - grafana
      - postgres
    restart: "no"

  app:
    image: ${COMPOSE_PROJECT_NAME}-app
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - ./.env
    environment:
      POSTGRES_HOST: postgres
      PYTHONPATH: /app
      GRAFANA_BASE_URL: http://localhost:3000
    ports:
      - "${APP_PORT:-8000}:8000"
    volumes:
      - .:/app
    depends_on:
      db-prep:
        condition: service_completed_successfully
      grafana-init:
        condition: service_completed_successfully
    restart: always


volumes:
  postgres_data:
  grafana_data: